"use strict";
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constants = exports.isStarted = exports.setContext = exports.getState = exports.stop = exports.start = exports.profile = void 0;
const delay_1 = __importDefault(require("delay"));
const profile_serializer_1 = require("./profile-serializer");
const time_profiler_bindings_1 = require("./time-profiler-bindings");
const { kSampleCount } = time_profiler_bindings_1.constants;
const DEFAULT_INTERVAL_MICROS = 1000;
const DEFAULT_DURATION_MILLIS = 60000;
let gProfiler;
let gSourceMapper;
let gIntervalMicros;
/** Make sure to stop profiler before node shuts down, otherwise profiling
 * signal might cause a crash if it occurs during shutdown */
process.once('exit', () => {
    if (isStarted())
        stop();
});
async function profile({ intervalMicros = DEFAULT_INTERVAL_MICROS, durationMillis = DEFAULT_DURATION_MILLIS, sourceMapper, lineNumbers = false, withContexts = false, }) {
    start({
        intervalMicros,
        durationMillis,
        sourceMapper,
        lineNumbers,
        withContexts,
    });
    await (0, delay_1.default)(durationMillis);
    return stop();
}
exports.profile = profile;
// Temporarily retained for backwards compatibility with older tracer
function start({ intervalMicros = DEFAULT_INTERVAL_MICROS, durationMillis = DEFAULT_DURATION_MILLIS, sourceMapper, lineNumbers = false, withContexts = false, }) {
    if (gProfiler) {
        throw new Error('Wall profiler is already started');
    }
    gProfiler = new time_profiler_bindings_1.TimeProfiler(intervalMicros, durationMillis * 1000, lineNumbers, withContexts);
    gSourceMapper = sourceMapper;
    gIntervalMicros = intervalMicros;
    gProfiler.start();
}
exports.start = start;
function stop(restart = false, generateLabels) {
    if (!gProfiler) {
        throw new Error('Wall profiler is not started');
    }
    const profile = gProfiler.stop(restart);
    const serialized_profile = (0, profile_serializer_1.serializeTimeProfile)(profile, gIntervalMicros, gSourceMapper, true, generateLabels);
    if (!restart) {
        gProfiler = undefined;
        gSourceMapper = undefined;
    }
    return serialized_profile;
}
exports.stop = stop;
function getState() {
    if (!gProfiler) {
        throw new Error('Wall profiler is not started');
    }
    return gProfiler.state;
}
exports.getState = getState;
function setContext(context) {
    if (!gProfiler) {
        throw new Error('Wall profiler is not started');
    }
    gProfiler.context = context;
}
exports.setContext = setContext;
function isStarted() {
    return !!gProfiler;
}
exports.isStarted = isStarted;
exports.constants = { kSampleCount };
//# sourceMappingURL=time-profiler.js.map